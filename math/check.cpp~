#include <fstream>
#include <iostream>
#include <random>
#include <chrono>

#define i64 long long
using namespace std;


class Graph{
   public:
   
   int n;        // number of vertices
   int* data;    // adj matrix
   int* edgeMap; // edge numbers: 0,..., C(n,2)-1
   ///////////////////////////////////////////////
   Graph(){ 
      this->n = 0; 
      data = nullptr; 
      edgeMap = nullptr;
   }
   ///////////////////////////////////////////////
   void initByN(int n){
      this->n = n; 
      this->data = new int[n * n]; 
      this->edgeMap = new int[(n * (n - 1))/2]; 
      for(int i=0;i<n*n;i++)   
         data[i]=0;        
      int e = 0;
      for(int i=0;i<n;i++)   
         for(int j = i + 1;j < n;j++) {           
            edgeMap[ e ] = i * n + j;        
            e++;
         }   
   }
   ///////////////////////////////////////////////
   Graph(int n){ 
      initByN(n);
   }
   ///////////////////////////////////////////////
   Graph(mt19937_64& gen, int n, int M){ // random GnM
      initByN(n);
      //cout << __LINE__ << endl;
      int Cn2 = n * (n - 1) / 2;
      int* temp = new int[Cn2];
     
      for(int i=0;i<Cn2;i++)
        temp[i] = i;

      //cout << __LINE__ << endl;

      uniform_int_distribution<int> rnde(0,Cn2-1);
      
      for(int i=0;i<M;i++){
        int rn = rnde(gen);
        int t = temp[i];
        temp[i] = temp[rn];
        temp[rn] = t;
        //cout << "-->" << temp[i] << endl;
      }


      
      for(int i = 0; i < M; i++)   
         data[ edgeMap[ temp[ i ] ] ] = 1;  
     
      //cout << __LINE__ << endl;
     
      for(int i=0;i<n;i++)   
         for(int j = i+1;j < n;j++) {           
            data[ j * n + i ] = data[ i * n + j ];            
         }       
         
      delete[] temp;   
    }  
   ///////////////////////////////////////////////
   Graph(string fname){
      ifstream fin(fname.c_str());
      int n;
      fin >> n;   
      initByN(n);

      for(int i=0;i<n*n;i++)
        fin >> data[i];

      fin.close();
   }
 
   ///////////////////////////////////////////////
 
   friend ostream& operator<<(ostream& out, Graph& gr);
 
   ~Graph() { delete[] data; }
};

///////////////////////////////////////////////

ostream& operator<<(ostream& out, Graph& gr){
   int n = gr.n;
   for (int i=0;i<n;i++){
     for (int j=0;j<n;j++)
        out << gr.data[i*n+j] << " ";
     out << endl;    
   }
   return out;  
}


char getBit(i64 num, int bt){

    i64 sel = static_cast<i64>(1) << bt;
    if (num & sel) return 1;
    else return 0;

}
////////////////////////////////////////////
int numBits(i64 num, int n){ // returns sum of lowest n bits
    int sum = 0; 
    for(int i=0;i<n;i++)
       sum += getBit(num,i);
    return sum;

}

////////////////////////////////////////////////////////////////

int check4Subgraphs(Graph& gr, int minDeg){
   
   int n = gr.n;
   int* graph = gr.data; 
   i64 subs = 0;
   i64 nsubs = (static_cast<i64>(1) << n) - 1;
   //cout << "Subs " << nsubs << endl;
   //cout << "n " << n << endl;
   int minSubgr = n + 1;
   for (i64 ii = 1; ii < nsubs; ii++){
     int mins = n+1; // min v. degree in subgraph
     int numVerts = numBits(ii,n); // number of verts in the subgraph
     for (int i = 0; i < n; i++){
        if (!getBit(ii, i)) continue;
        int sumj = 0;
        for (int j = 0;j < n;j++){
           if (!getBit(ii, j)) continue;
           sumj += graph[i * n + j];
        }
        if (sumj < mins) {
          mins = sumj;            
          if (mins < minDeg) break;
        }        
     }
     if (mins >= minDeg) {
       subs = ii; 
       if(minSubgr > numVerts) 
          minSubgr = numVerts;
       //cout << subs << " verts -> " << numVerts << endl;
       //break;
     }  
   }  
   
   int lenSub = 0;
   for (int i=0;i<n;i++) 
     lenSub += getBit(subs, i);
   
   return minSubgr;   
   
}
const int MIL = 1<<20;

int bitSums[MIL];

void setBitSums(){
   for(int num = 0;num<MIL;num++){
      int nnum = num;
      int sum = 0;
      while (nnum>0){
        sum += nnum & 0x01;
        nnum >>= 1;
      }
      bitSums[num] = sum;
   }
}
////////////////////////////////////////////////////////////////
int getBitSum(i64 num){
   if (num < MIL) return bitSums[(int)num];
   int sum = 0;
   while (num > 0){
      sum += bitSums[num & (MIL-1)];
      num /= MIL;
   }
   return sum;
}

int check4SubgraphsF(Graph& gr, int minDeg){
   
   int n = gr.n;
   int* graphD = gr.data; 
   i64  graph[n];
   for(int i=0;i<n;i++){
      graph[i] = 0;
      i64 mul=1;
      for(int j=0;j<n;j++){
        graph[i] += mul * graphD[i*n+j];
        mul = mul << 1;
      }
   }
     
   i64 subs = 0;
   i64 nsubs = (static_cast<i64>(1) << n) - 1;
   //cout << "Subs " << nsubs << endl;
   //cout << "n " << n << endl;
   int minSubgr = n + 1;
   for (i64 ii = 1; ii < nsubs; ii++){
     int mins = n+1; // min v. degree in subgraph
     //int numVerts = numBits(ii,n); // number of verts in the subgraph
     int numVerts = getBitSum(ii & nsubs); // number of verts in the subgraph
     
     for (int i = 0; i < n; i++){
        if (!getBit(ii, i)) continue;
        int sumj = getBitSum(graph[i] & ii);
        //for (int j = 0;j < n;j++){
        //   if (!getBit(ii, j)) continue;
        //   sumj += graph[i * n + j];
        //}
        if (sumj < mins) {
          mins = sumj;            
          if (mins < minDeg) break;
        }        
     }
     if (mins >= minDeg) {
       subs = ii; 
       if(minSubgr > numVerts) 
          minSubgr = numVerts;
       //cout << subs << " verts -> " << numVerts << endl;
       //break;
     }  
   }  
   
   int lenSub = 0;
   for (int i=0;i<n;i++) 
     lenSub += getBit(subs, i);
   
   return minSubgr;   
   
}

////////////////////////////////////////////////////////////////

int main(){

  //Graph gr("gr10.dat");
  //cout << check4Subgraphs(gr, 3) << endl;
  unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
  
  mt19937_64 gen(seed);
  setBitSums();
  cout << "Sums done " << endl;
  int n = 12;
  int M = 2 * n - 1;
  int maxSub = 0;
  for (int i = 0;i < 1000000;i++){
     Graph gr(gen,n,M);
//      cout << gr << endl;  
     int csub = check4SubgraphsF(gr, 3);
     if (csub > maxSub){
         maxSub = csub;
         cout << gr << "i -> " << i << " Max --> " << maxSub << endl;
     }    
     if (i % 5000 == 0) cout << " ----> " << i << endl;

  }
  
}
